"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.

Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from random import randint, seed
from timeit import timeit
from statistics import median

seed(1)

m = 10
ten = [randint(-100, 100) for _ in range(2 * m + 1)]
print(f'Медиана массива из 10 элементов - {median(ten)}')
print(f'Замер функции поиска медиана в массиве длиной 10: '
      f'{timeit("median(ten[:])",globals=globals(),number=1000)}')    # 0.001066299999365583


m = 100
hundred = [randint(-100, 100) for _ in range(2 * m + 1)]
print(f'Медиана массива из 100 элементов - {median(hundred)}')
print(f'Замер функции поиска медиана в массиве длиной 100: '
      f'{timeit("median(hundred[:])",globals=globals(),number=1000)}')    # 0.012358799984212965


m = 1000
thousand = [randint(-100, 100) for _ in range(2 * m + 1)]
print(f'Медиана массива из 1000 элементов - {median(thousand)}')
print(f'Замер функции поиска медиана в массиве длиной 1000: '
      f'{timeit("median(thousand[:])",globals=globals(),number=1000)}')    # 0.21115570000256412


'''
Метод median из пакета statistics работает быстрее всех рассмотренных вариантов.
Поиск медианы без сортировки оптимален только на небольших массивах.
'''