"""
Задание 1.

Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python

На каждый скрипт нужно два решения - исходное и оптимизированное.

Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler

Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler

Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.


ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.

Это файл для первого скрипта
"""
'''
1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык. Например:
>>> num_translate("one")
"один"
>>> num_translate("eight")
"восемь"
Если перевод сделать невозможно, вернуть None.
Подумайте, как и где лучше хранить информацию, необходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.
'''
# Задача из Основ Питона.
# Представлен список чисел. Необходимо вывести те его элементы, значения которых больше предыдущего.
from memory_profiler import memory_usage

src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55] * 1000000


def memory_use(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff
    return wrapper


@memory_use
def larger_than_last(lst):
    return [lst[i] for i in range(1, len(lst)) if lst[i] > lst[i - 1]]


@memory_use
def larger_than_last_gen(lst):
    for idx, num in enumerate(lst):
        if lst[idx] > lst[idx - 1]:
            yield num


if __name__ == '__main__':
    lst, lst_memory = larger_than_last(src)     # Затрачено на выполнение odd_to(1000000) 54.6953125 Mib.
    print(f'Затрачено на выполнение odd_to(1000000) {lst_memory} Mib.')

    generator, generator_memory = larger_than_last_gen(src)     # Затрачено на выполнение odd_to_gen(1000000) 0.0 Mib.
    # for i in generator:
    #     print(next(generator))
    print(f'Затрачено на выполнение odd_to_gen(1000000) {generator_memory} Mib.')

'''
Для оптимизации функции из основ использовал генератор. Удалость оптимизировать ~ 54.6953125 Mib
'''










