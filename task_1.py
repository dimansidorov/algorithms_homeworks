"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""
from random import randint
from timeit import timeit


def bubble_sort_edited(lst_obj):
    n = 1
    while n < len(lst_obj):
        flag = False
        for i in range(len(lst_obj)-n):
            if lst_obj[i] > lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                flag = True
        n += 1
        if not flag:
            break
    return lst_obj


ten = [randint(-100, 100) for _ in range(10)]
print(f'Замер длины массива равной 10: '
      f'{timeit("bubble_sort_edited(ten[:])",globals=globals(),number=1000)}')    # 0.008010000019567087

hundred = [randint(-100, 100) for _ in range(100)]
print(f'Замер длины массива равной 100: '
      f'{timeit("bubble_sort_edited(hundred[:])",globals=globals(),number=1000)}')    # 0.8138955000031274

thousand = [randint(-100, 100) for _ in range(1000)]
print(f'Замер длины массива равной 1000: '
      f'{timeit("bubble_sort_edited(thousand[:])",globals=globals(),number=1000)}')    # 82.84081920000608

'''
Оптимизация не принесла никакого эффекта либо эффект слишком незначительный. Цифры примерно такие же
как и у оригинальной сортировки методом пузырька. Эффективней наша корректировка будет в уже отсортированном
массиве.
'''